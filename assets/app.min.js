var hasznalttomb = [],
wordtomb = wordtomb2;


var answer = getAnswer(),
placeholderChars = answer.toUpperCase().split(''),
hiba = 0;

const availableChars = [
			'A', 'Á', 'B', 'C', 'D', 'E', 'É', 'F', 'G', 'H', 'I', 'Í', 'J', 'K', 'L', 'M', 'N', 'O', 'Ó', 'Ö', 'Ő', 'P', 'Q', 'R', 'S', 'T', 'U', 'Ú', 'Ü', 'Ű', 'V', 'W', 'X', 'Y', 'Z'],
		maxGuesses = 10,
		availableCharsSelector = document.getElementById('hangman-available-characters-list'),
		answerPlaceholdersSelector = document.getElementById('hangman-answer-placeholders'),
		noticesSelector = document.getElementById('hangman-notices'),
		canvasSelector = document.getElementById('hangman-canvas'),
		canvasContext = canvasSelector.getContext('2d'),
		stickmanCoordinates = [
			{ // Base.
				'lineStartX': 5,
				'lineStartY': 75,
				'lineEndX': 70,
				'lineEndY': 75,
			},
			{ // Post.
				'lineStartX': 10,
				'lineStartY': 5,
				'lineEndX': 10,
				'lineEndY': 75,
			},
			{ // Boom.
				'lineStartX': 10,
				'lineStartY': 5,
				'lineEndX': 37.5,
				'lineEndY': 5,
			},
			{ // Rope.
				'lineStartX': 37.5,
				'lineStartY': 5,
				'lineEndX': 37.5,
				'lineEndY': 15,
			},
			{ // Head.
				'arcCenterX': 37.5,
				'arcCenterY': 20,
				'radius': 5,
			},
			{ // Torso.
				'lineStartX': 37.5,
				'lineStartY': 25,
				'lineEndX': 37.5,
				'lineEndY': 55,
			},
			{ // Left leg.
				'lineStartX': 37.5,
				'lineStartY': 55,
				'lineEndX': 18.75,
				'lineEndY': 70,
			},
			{ // Right leg.
				'lineStartX': 37.5,
				'lineStartY': 55,
				'lineEndX': 56.25,
				'lineEndY': 70,
			},
			{ // Left arm.
				'lineStartX': 37.5,
				'lineStartY': 37.5,
				'lineEndX': 20,
				'lineEndY': 31.25,
			},
			{ // Right arm.
				'lineStartX': 37.5,
				'lineStartY': 37.5,
				'lineEndX': 55,
				'lineEndY': 31.25,
			},
		];

var guessedChars = [],
	misses = 0,
	characterPlaceholderElements = [],
	answerChars = getAnswerChars();

/***************
 *  Helpers
 ***************/

/**
 * Returns the base64 decoded answer, or an empty string on failure.
 * @returns {string}
 */
function getAnswer() {
	return wordtomb[0];
}

/**
 * Returns a sorted array of unique characters that exits within the
 * answer.
 * @returns {Array}
 */
function getAnswerChars() {
	var answerArray = answer.toUpperCase().split('');

	return answerArray.sort().filter(function(char, index, inputArray) {
		return isValidChar(char) && char !== inputArray[index - 1];
	});
}

/**
 * Checks if a character exists in the available characters.
 * @param {string} char Character to check.
 * @returns {boolean}
 */
function isValidChar(char) {
	return availableChars.includes(char.toUpperCase());
}

/**
 * Checks if the player lost.
 * @returns {boolean}
 */
function playerWon() {
	var correctGuesses = guessedChars.sort().filter(function(char) {
		return answerChars.includes(char);
	});

	return correctGuesses.length === answerChars.length && correctGuesses.every(function(element, index) {
		return element === answerChars[index];
	});
}

/**
 * Checks if the player lost.
 * @returns {boolean}
 */
function playerLost() {
	return maxGuesses <= misses;
}

function renderAvailableChars() {
	var html = '';
	for (var $i = 0; $i < availableChars.length; $i++) {
		html += '<li class="hangman-available-character" data-key-code="' +
						availableChars[$i].charCodeAt(0) + '" data-char="' +
						availableChars[$i] + '">' + availableChars[$i] +
						'</li>';
	}

	availableCharsSelector.innerHTML += html;
}

function renderEmptyPlaceholders() {

	if (!answer) {
		console.log('Rossz answer: '+ answer);
		answerPlaceholdersSelector.innerHTML += '<strong>Oops! Something went wrong with retrieving the answer&hellip;</strong>';
		return;
	}

	var html = '<ul id="hangman-placeholders"><li class="word-placeholder"><ul>';

	for (var $i = 0; $i < placeholderChars.length; $i++) {
		if (' ' === placeholderChars[$i]) {
			html += '<li class="character-placeholder space"></ul></li><li class="word-placeholder"><ul>';
		}
		else if (!isValidChar(placeholderChars[$i])) {
			html += '<li class="character-placeholder given">' +
							placeholderChars[$i] + '</li>';
		}
		else {
			html += '<li class="character-placeholder guess">_</li>';
		}
	}

	html += '</ul></li></ul>';

	answerPlaceholdersSelector.innerHTML += html;
}

function getCharacterPlaceholderElements() {
	characterPlaceholderElements = answerPlaceholdersSelector.querySelectorAll(
			'.character-placeholder');
}

/**
 * Retrieves the current guess and passes it to the validateCurrentGuess()
 * function.
 */
function addGuessListener() {

	document.onkeydown = function(event) {
		validateCurrentGuess(event.key.toUpperCase());
	};

	availableCharsSelector.addEventListener('click', function(event) {
		if (event.target.matches('li')) {
			validateCurrentGuess(event.target.textContent);
		}
	});

}


function addResetListener() {
	noticesSelector.addEventListener('click', function(event) {
		if (event.target.matches('button#hangman-reset-game')) {
			resetGame();
		}
	});
}

/**
 * Sets up the HTML canvas.
 */
function setupCanvas() {
	canvasSelector.width = 75;
	canvasSelector.height = 80;
}

function validateCurrentGuess(currentGuess) {

	if (playerWon() || playerLost()) {
		return;
	}

	if (!isValidChar(currentGuess) || guessedChars.includes(currentGuess)) {
		return;
	}

	guessedChars.push(currentGuess);

	// Is the current guess correct?
	if (answerChars.includes(currentGuess)) {
		printCorrectGuess(currentGuess);
		if (playerWon()) {
			doGameEnd('won');
		}
	}
	else {
		misses++;
		drawHangman(misses - 1);
		if (playerLost()) {
			doGameEnd('lost');
		}
	}

	// Disable the guessed character.
	disableCharacter(currentGuess);
}

/**
 * Fills in the placeholders with correct guesses.
 * @param {string} guess Player's guess.
 */
function printCorrectGuess(guess) {
	for (var $i = 0; $i < placeholderChars.length; $i++) {
		if (placeholderChars[$i] === guess) {
			characterPlaceholderElements[$i].innerHTML = guess;
		}
	}
}

/**
 * Disables characters from begin selected.
 * @param {string|number} character Character to be disabled.
 */
function disableCharacter(character) {
	var charSelector = availableCharsSelector.querySelector('[data-char="' + character + '"]');

	if (!charSelector.classList.contains('disabled')) {
		charSelector.className += ' disabled';
	}
}

/**
 * Draws the hangman figure.
 * @param {number} misses Stickman coordinates index
 */
function drawHangman(misses) {
	canvasContext.beginPath();

	var path = stickmanCoordinates[misses];

	// Check if we should draw a circle or line.
	if (path.hasOwnProperty('radius')) {
		canvasContext.arc(path.arcCenterX, path.arcCenterY, path.radius, 0, (Math.PI * 2));
	}
	else
	{
		canvasContext.moveTo(path.lineStartX, path.lineStartY);
		canvasContext.lineTo(path.lineEndX, path.lineEndY);
	}
	canvasContext.stroke();
}

/*****************
 * Game Teardown
 *****************/

/**
 * Ends the game.
 * @param {String} outcome Whether the player 'won' or not.
 */
function doGameEnd(outcome) {
	var html;

	if ('won' === outcome) {
		html = '<p style="font-weight: bold;">Szuper vagy, így tovább! <button id="hangman-reset-game">Tovább a következő játékra!</button></p>';
	}
	else {
		hiba++;
		html = '<p style="font-weight: bold;">Sajnos ez most nem sikerült! <button id="hangman-reset-game">Tovább a következő játékra!</button></p>';
	}

	noticesSelector.innerHTML = html;
}



function resetEmptyPlaceholders()
{
	answerPlaceholdersSelector.innerHTML = '';
}

function resetKeys()
{
	availableCharsSelector.innerHTML = '';
}

function resetnoticesSelector()
{
	noticesSelector.innerHTML = '';
}

function resetCanvas()
{
	canvasContext.clearRect(0, 0, canvasSelector.width, canvasSelector.height);
}

function showWin()
{
	var x = document.getElementById("hangman-game");
	var y = document.getElementById("hangman-game-win");
	
	var win = document.getElementById("correctword");
	var wrong = document.getElementById("wrongword");
	var percent = document.getElementById("percent");
	var csik = document.getElementById("csik");

	win.innerHTML = (wordtomb.length - hiba);
	wrong.innerHTML = hiba;

	var p = Math.round(100 - (hiba / wordtomb.length * 100));
	percent.innerHTML = p;
	csik.style.width = ""+p+"%";

	x.style.display = "none";
	y.style.display = "block";
}

function resetGame() {
	if (hasznalttomb.length == 0)
	{
		hasznalttomb[0] = 0;
	}
	else
	{
		hasznalttomb[hasznalttomb.length] = (hasznalttomb.length-1);
	}

	if (hasznalttomb.length == wordtomb.length) {
		showWin();
		return;
	}

	answer = wordtomb[hasznalttomb.length];

	answerChars = getAnswerChars();
	placeholderChars = answer.toUpperCase().split('');

	resetEmptyPlaceholders();
	resetnoticesSelector();
	resetKeys();
	resetCanvas();


	init();


	guessedChars = [];
	misses = 0;
}

function init() {
	renderAvailableChars();
	renderEmptyPlaceholders();
	getCharacterPlaceholderElements();
	setupCanvas();
}

init();
addResetListener();
addGuessListener();
//showWin();